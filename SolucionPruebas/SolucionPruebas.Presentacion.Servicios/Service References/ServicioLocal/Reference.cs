//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34209
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolucionPruebas.Presentacion.Servicios.ServicioLocal {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioLocal.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnEnviarXML", ReplyAction="http://tempuri.org/IService/fnEnviarXMLResponse")]
        string fnEnviarXML(string psComprobante, string psTipoDocumento, int pnId_Estructura, string sNombre, string sContraseña, string sVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnAplicarHojaTransformacion", ReplyAction="http://tempuri.org/IService/fnAplicarHojaTransformacionResponse")]
        string fnAplicarHojaTransformacion(string psDocumento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarPfxPem", ReplyAction="http://tempuri.org/IService/fnGenerarPfxPemResponse")]
        bool fnGenerarPfxPem(string psRutaPfx, string psCertificado, string psLlave, string psPassword, bool pbIncludeCertsInChain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarPfxBytes", ReplyAction="http://tempuri.org/IService/fnGenerarPfxBytesResponse")]
        bool fnGenerarPfxBytes(string psRutaPfx, byte[] psCertificado, byte[] psLlave, string psPassword, bool pbIncludeCertsInChain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarPfxRuta", ReplyAction="http://tempuri.org/IService/fnGenerarPfxRutaResponse")]
        bool fnGenerarPfxRuta(string psRutaPfx, string psRutaCertificado, string psRutaLlave, string psPassword, bool pbIncludeCertsInChain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarPfxRutasByte", ReplyAction="http://tempuri.org/IService/fnGenerarPfxRutasByteResponse")]
        byte[] fnGenerarPfxRutasByte(string psRutaPfx, string psRutaCertificado, string psRutaLlave, string psPassword, bool pbIncludeCertsInChain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarSello", ReplyAction="http://tempuri.org/IService/fnGenerarSelloResponse")]
        string fnGenerarSello(string psRutaPEM, string psCadenaOriginal, byte[] psLlave, string psPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarSelloRutas", ReplyAction="http://tempuri.org/IService/fnGenerarSelloRutasResponse")]
        string fnGenerarSelloRutas(string psRutaPEM, string psCadenaOriginal, string psLlave, string psPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnGenerarSelloOpenSSL", ReplyAction="http://tempuri.org/IService/fnGenerarSelloOpenSSLResponse")]
        string fnGenerarSelloOpenSSL(string psRutaCertificado, string psRutaLlave, string psPassword, string psNombreCertificado, string psNombreLlave, string psCadenaOriginal, string psRutaPfx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/fnServicioPrueba", ReplyAction="http://tempuri.org/IService/fnServicioPruebaResponse")]
        string fnServicioPrueba(string psPrueba);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : SolucionPruebas.Presentacion.Servicios.ServicioLocal.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<SolucionPruebas.Presentacion.Servicios.ServicioLocal.IService>, SolucionPruebas.Presentacion.Servicios.ServicioLocal.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string fnEnviarXML(string psComprobante, string psTipoDocumento, int pnId_Estructura, string sNombre, string sContraseña, string sVersion) {
            return base.Channel.fnEnviarXML(psComprobante, psTipoDocumento, pnId_Estructura, sNombre, sContraseña, sVersion);
        }
        
        public string fnAplicarHojaTransformacion(string psDocumento) {
            return base.Channel.fnAplicarHojaTransformacion(psDocumento);
        }
        
        public bool fnGenerarPfxPem(string psRutaPfx, string psCertificado, string psLlave, string psPassword, bool pbIncludeCertsInChain) {
            return base.Channel.fnGenerarPfxPem(psRutaPfx, psCertificado, psLlave, psPassword, pbIncludeCertsInChain);
        }
        
        public bool fnGenerarPfxBytes(string psRutaPfx, byte[] psCertificado, byte[] psLlave, string psPassword, bool pbIncludeCertsInChain) {
            return base.Channel.fnGenerarPfxBytes(psRutaPfx, psCertificado, psLlave, psPassword, pbIncludeCertsInChain);
        }
        
        public bool fnGenerarPfxRuta(string psRutaPfx, string psRutaCertificado, string psRutaLlave, string psPassword, bool pbIncludeCertsInChain) {
            return base.Channel.fnGenerarPfxRuta(psRutaPfx, psRutaCertificado, psRutaLlave, psPassword, pbIncludeCertsInChain);
        }
        
        public byte[] fnGenerarPfxRutasByte(string psRutaPfx, string psRutaCertificado, string psRutaLlave, string psPassword, bool pbIncludeCertsInChain) {
            return base.Channel.fnGenerarPfxRutasByte(psRutaPfx, psRutaCertificado, psRutaLlave, psPassword, pbIncludeCertsInChain);
        }
        
        public string fnGenerarSello(string psRutaPEM, string psCadenaOriginal, byte[] psLlave, string psPassword) {
            return base.Channel.fnGenerarSello(psRutaPEM, psCadenaOriginal, psLlave, psPassword);
        }
        
        public string fnGenerarSelloRutas(string psRutaPEM, string psCadenaOriginal, string psLlave, string psPassword) {
            return base.Channel.fnGenerarSelloRutas(psRutaPEM, psCadenaOriginal, psLlave, psPassword);
        }
        
        public string fnGenerarSelloOpenSSL(string psRutaCertificado, string psRutaLlave, string psPassword, string psNombreCertificado, string psNombreLlave, string psCadenaOriginal, string psRutaPfx) {
            return base.Channel.fnGenerarSelloOpenSSL(psRutaCertificado, psRutaLlave, psPassword, psNombreCertificado, psNombreLlave, psCadenaOriginal, psRutaPfx);
        }
        
        public string fnServicioPrueba(string psPrueba) {
            return base.Channel.fnServicioPrueba(psPrueba);
        }
    }
}
